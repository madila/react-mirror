{"version":3,"file":"main.js","mappings":"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","sources":["webpack://react-mirror/webpack/bootstrap","webpack://react-mirror/webpack/runtime/define property getters","webpack://react-mirror/webpack/runtime/hasOwnProperty shorthand","webpack://react-mirror/webpack/runtime/make namespace object","webpack://react-mirror/external commonjs \"react\"","webpack://react-mirror/external commonjs \"react-dom\"","webpack://react-mirror/external commonjs \"specificity\"","webpack://react-mirror/./src/clone.ts","webpack://react-mirror/./src/utils.ts","webpack://react-mirror/./src/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-dom\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"specificity\");","import { compare } from \"specificity\";\nimport { camelToSpinalCase } from \"./utils\";\nexport function copyStyles(sourceElt, targetElt, options) {\n    const styleDecls = {};\n    const pseudoRegex = /:(:?)[a-z-]+/g;\n    for (let i = 0; i < document.styleSheets.length; i++) {\n        const styleSheet = document.styleSheets[i];\n        const rules = styleSheet.rules || styleSheet.cssRules;\n        for (let j = 0; j < rules.length; j++) {\n            const rule = rules[j];\n            // test each selector in a group separately\n            // accounts for bug with specificity library where\n            // `.classA, .classB` fails when compared with `.classB`\n            // https://github.com/keeganstreet/specificity/issues/4\n            for (const selectorText of rule.selectorText\n                .split(\",\")\n                .map((s) => s.trim())) {\n                // also match pseudo selectors\n                const selector = selectorText === null || selectorText === void 0 ? void 0 : selectorText.replace(pseudoRegex, \"\");\n                if (sourceElt === null || sourceElt === void 0 ? void 0 : sourceElt.matches(selector)) {\n                    styleDecls[selectorText] = rule.style;\n                }\n            }\n        }\n    }\n    // ensures only the cloned styles are applied to element\n    const singleClassName = targetElt.className.replace(\" \", \"-\");\n    targetElt.className = `${singleClassName}${(options === null || options === void 0 ? void 0 : options.class) || \"\"}`;\n    // style element used for transfering pseudo styles\n    const styleElt = document.createElement(\"style\");\n    styleElt.type = \"text/css\";\n    for (const selector of Object.keys(styleDecls).sort(compare)) {\n        const styleDecl = styleDecls[selector];\n        const pseudos = selector.match(pseudoRegex);\n        // store pseudo styles in style element\n        if (pseudos === null || pseudos === void 0 ? void 0 : pseudos.length) {\n            for (const p of new Set(pseudos)) {\n                styleElt.innerHTML += `.${targetElt.className}${p} { ${styleDecl.cssText} }\\n`;\n            }\n        }\n        else {\n            for (let i = 0; i < styleDecl.length; i++) {\n                const propName = styleDecl[i];\n                const propValue = styleDecl.getPropertyValue(propName);\n                targetElt.style.setProperty(propName, propValue);\n            }\n        }\n    }\n    // append style element used for transfering pseudo styles\n    styleElt.innerHTML && targetElt.appendChild(styleElt);\n}\nexport function cloneNodeWithStyles(node, options) {\n    const clone = node.cloneNode(false);\n    // check that node is html element before cloning styles\n    const cloneElt = clone;\n    const nodeElt = node;\n    if (nodeElt.style && cloneElt.style) {\n        copyStyles(nodeElt, cloneElt, options);\n        for (const [prop, value] of Object.entries(options.styles || {})) {\n            cloneElt.style.setProperty(camelToSpinalCase(prop), value);\n        }\n    }\n    return clone;\n}\nexport function deepCloneWithStyles(node, options) {\n    const clone = cloneNodeWithStyles(node, options);\n    for (const child of node.childNodes) {\n        clone.appendChild(deepCloneWithStyles(child, options));\n    }\n    return clone;\n}\n","export function randomString(length) {\n    let str = \"\";\n    while (str.length < length) {\n        str += Math.random()\n            .toString(36)\n            .substr(2, length - str.length);\n    }\n    return str;\n}\nexport function camelToSpinalCase(camelCase) {\n    return camelCase.replace(/([A-Z])/g, \"-$1\").toLocaleLowerCase();\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { randomString } from \"./utils\";\nimport { deepCloneWithStyles, copyStyles } from \"./clone\";\nexport function Mirror({ className, reflect }) {\n    // unique identifier of this mirror\n    const instanceId = React.useMemo(() => randomString(7), [reflect]);\n    // ref to element in which reflection will be framed\n    const [frame, ref] = React.useState(null);\n    // real dom node of react element being reflected\n    // eslint-disable-next-line react/no-find-dom-node\n    const real = React.useMemo(() => ReactDOM.findDOMNode(reflect), [reflect]);\n    // update the reflection to match the real node\n    const update = React.useCallback(() => {\n        if (!frame || !real)\n            return;\n        const cloneOptions = {\n            class: `_${instanceId}`,\n            styles: { pointerEvents: \"none\" },\n        };\n        const reflection = deepCloneWithStyles(real, cloneOptions);\n        if (frame.firstChild) {\n            frame.replaceChild(reflection, frame.firstChild);\n        }\n        else {\n            frame.appendChild(reflection);\n        }\n        while (frame.firstChild !== frame.lastChild) {\n            frame.removeChild(frame.lastChild);\n        }\n        frame.className = className;\n        copyStyles(frame, frame, cloneOptions);\n    }, [frame, real, className]);\n    // start of the reflection\n    React.useEffect(update, [update]);\n    // mutation observer single instance\n    const observer = React.useMemo(() => new MutationObserver(update), [\n        update,\n    ]);\n    // observe or disconnect when real node is set or unmounted\n    React.useEffect(() => {\n        if (!real || !observer)\n            return undefined;\n        observer.observe(real, {\n            attributes: true,\n            childList: true,\n            subtree: true,\n            characterData: true,\n        });\n        // also listen for input changes since those are not observable\n        real.addEventListener(\"input\", update);\n        return () => observer.disconnect();\n    }, [real, observer]);\n    // return frame element\n    return React.createElement(\"div\", { className: className, ref: ref });\n}\nexport function useMirror(props) {\n    const [node, ref] = React.useState(null);\n    return [ref, React.createElement(Mirror, Object.assign({ key: \"mirror\" }, props, { reflect: node }))];\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","copyStyles","sourceElt","targetElt","options","styleDecls","pseudoRegex","i","document","styleSheets","length","styleSheet","rules","cssRules","j","rule","selectorText","split","map","s","trim","selector","replace","matches","style","singleClassName","className","class","styleElt","createElement","type","keys","sort","compare","styleDecl","pseudos","match","p","Set","innerHTML","cssText","propName","propValue","getPropertyValue","setProperty","appendChild","deepCloneWithStyles","node","clone","cloneNode","cloneElt","nodeElt","entries","styles","toLocaleLowerCase","cloneNodeWithStyles","child","childNodes","Mirror","reflect","instanceId","React","str","Math","random","toString","substr","randomString","frame","ref","real","ReactDOM","update","cloneOptions","pointerEvents","reflection","firstChild","replaceChild","lastChild","removeChild","observer","MutationObserver","observe","attributes","childList","subtree","characterData","addEventListener","disconnect","useMirror","props","assign"],"sourceRoot":""}